;;---------------
;; base setup
;;---------------

;; encoding
(setq default-process-coding-system '(utf-8 . utf-8))

;; font size
(set-face-attribute 'default nil :height 140)

;; set default font
(set-frame-font
 (cond
  ((string-equal system-type "windows-nt")
   (if (member "Rec Mono Casual" (font-family-list)) "Rec Mono Casual" nil)
   (if (member "Consolas" (font-family-list)) "Consolas" nil))
  ((string-equal system-type "darwin")
   (if (member "Menlo" (font-family-list)) "Menlo-16" nil))
  ((string-equal system-type "gnu/linux")
   (if (member "DejaVu Sans Mono" (font-family-list)) "DejaVu Sans Mono" nil))
  (t nil))
 t t)

;; set font for chinese characters
(set-fontset-font
 t
 '(#x4e00 . #x9fff)
 (cond
  ((string-equal system-type "windows-nt")
   (cond
    ((member "微软雅黑" (font-family-list)) "Microsoft YaHei")
    ((member "Microsoft JhengHei" (font-family-list)) "Microsoft JhengHei")
        ((member "SimHei" (font-family-list)) "SimHei")))
  ((string-equal system-type "darwin")
   (cond
    ((member "Hei" (font-family-list)) "Hei")
    ((member "Heiti SC" (font-family-list)) "Heiti SC")
    ((member "Heiti TC" (font-family-list)) "Heiti TC")))
    ((string-equal system-type "gnu/linux")
   (cond
    ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei"))))
  )

;; enable column numbers
(setq column-number-mode t)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; using arrow for moving through buffers
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <right>") 'windmove-right)

;; recent files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
(run-at-time nil (* 5 60) 'recentf-save-list)

;;---------------
;; packages setup
;;---------------

;; quelpa - For those packages which are not in MELPA
(use-package quelpa
  :config
  (use-package quelpa-use-package)
  (setq quelpa-update-melpa-p nil)
  (quelpa-use-package-activate-advice))

;; R setup
(use-package ess)

;; julia
(use-package julia-mode)

;; org
(use-package org
  :mode (("\\.org$" . org-mode))
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((R . t)))
  )

;; completion
;; (use-package company
;; 	     :config
;; 	     (add-hook 'after-init-hook 'global-company-mode))
;; (setq company-selection-wrap-around t
;;       company-tooltip-align-annotations t
;;       company-idle-delay 0.45
;;       company-minimum-prefix-length 3
;;       company-tooltip-limit 10)

;; (use-package popup)



;; markdown
(use-package markdown-mode
  :mode ("\\.md$" . markdown-mode)
  :hook (markdown-mode . auto-fill-mode)
  :config
  (set-face-attribute 'markdown-code-face nil :inherit 'org-block)
  )


;; (use-package lsp-bridge
  ;; :quelpa (lsp-bridge :fetcher git :repo "https://hub.fgit.ml/manateelazycat/lsp-bridge.git"))
  ;; :config (global-lsp-bridge-mode)
;; )
(add-to-list 'load-path "~/.emacs.d/lisp/lsp-bridge")

(use-package posframe)

(require 'yasnippet)
(yas-global-mode 1)

;; (use-package counsel)

;; lsp-mode
;; (use-package lsp-mode
;;   :init
;;   ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
;;   (setq lsp-keymap-prefix "C-c l")
;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
;;          (ess-mode . lsp)
;;          ;; if you want which-key integration
;;          (lsp-mode . lsp-enable-which-key-integration))
;;   :commands lsp)

;; ;; optionally
;; (use-package lsp-ui :commands lsp-ui-mode)
;; ;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; ;; if you are ivy user
;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))

;; parens matching and highlights
;; paren is internal pkg
(use-package paren
  :ensure nil
  :init
  (setq show-paren-delay 0)
  :config
  (show-paren-mode +1))

;; zig
(use-package zig-mode
:mode ("\\.zig\\'" . zig-mode)
  )

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(zig-mode counsel spinner which-key dap-mode lsp-mode company comany use-package ess auto-complete)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
